<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6353c52d0ee11ceb942e857b001e95d85500d690 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Decodifica un string de JSON</refpurpose>
 </refnamediv> 
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>bool</type><type>null</type></type><parameter>associative</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Convierte un string codificado en JSON a una variable de PHP.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       El <type>string</type> de <parameter>json</parameter> a decodificar.
      </para>
      <para>
       Esta función sólo trabaja con string codificados en UTF-8.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>associative</parameter></term>
     <listitem>
      <para>
      Cuando es &true;, los objects JSON devueltos serán convertidos a
      &array; asociativos, cuando es &false; los objects JSON devueltos serán convertidos 
      a &object;s. Cuando es &null;, los objects JSON serán convertidos a
      &array; asociativos u &object;s  dependiendo de si <constant>JSON_OBJECT_AS_ARRAY</constant>
      es establecida en los <parameter>flags</parameter>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Profundidad máxima de anidamiento de la estructura que se decodifica.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Máscara de bit de
       <constant>JSON_BIGINT_AS_STRING</constant>,
       <constant>JSON_INVALID_UTF8_IGNORE</constant>,
       <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>,
       <constant>JSON_OBJECT_AS_ARRAY</constant>,
       <constant>JSON_THROW_ON_ERROR</constant>.
       El comportamiento de estas constantes está descrito en la pagina de 
       <link linkend="json.constants">JSON constants</link>.
      </para>
     </listitem>
    </varlistentry>    
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor codificado en <parameter>json</parameter> en un tipo de PHP
   apropiado. Los valores <literal>true</literal>, <literal>false</literal> y
   <literal>null</literal> son devueltos como &true;, &false; y &null;
   respectivamente. &null; es devuelto si el parámetro <parameter>json</parameter> no se puede
   decodificar o si los datos codificados son más profundos que el límite de recursividad.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.3.0</entry>
       <entry>
        <constant>JSON_THROW_ON_ERROR</constant>
        <parameter>flags</parameter> fue añadido.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <parameter>associative</parameter> es ahora nullable.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <constant>JSON_INVALID_UTF8_IGNORE</constant>, y
        <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>
        <parameter>flags</parameter> fueron añadidas.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Un clave JSON vacia ("") puede ser codificada en la propiedad del object vacio
        en lugar de usar una clave con valor<literal>_empty_</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Acceder a propiedades de objeto no válidas</title>
    <simpara>
     Se puede acceder a elementos de un objeto que contienen caracteres no
     permitidos por la convención de nombres de PHP (p.ej., el guión)
     encapsulando el nombre del elemento entre llaves y apóstrofe.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Errores comunes al usar <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// los siguientes string son válidos en JavaScript pero no en JSON

// el nombre y el valor deben estar entre comillas dobles
// las comillas simples no son válidas
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// el nombre debe estar entre comillas dobles
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// las comas finales no están permitidas
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Errores con <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codificar los datos con una profundidad máxima de 4 (array -> array -> array -> string)
$json = json_encode(
    array(
        1 => array(
            'English' => array(
                'One',
                'January'
            ),
            'French' => array(
            'Une',
            'Janvier'
            )
        )
    )
);

// Mostrar los errores para diferentes profundidades.
var_dump(json_decode($json, true, 4));
echo 'Último error: ', json_last_error_msg(), PHP_EOL, PHP_EOL;
var_dump(json_decode($json, true, 3));
echo 'Último error: ', json_last_error_msg(), PHP_EOL, PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Ultimo error: No error

NULL
Ultimo error: Maximum stack depth exceeded
]]>
    </screen>
   </example>
   <example>
    <title><function>json_decode</function> de enteros grandes</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
object(stdClass)#1 (1) {
  ["number"]=>
  string(20) "12345678901234567890"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La especificación de JSON no es JavaScript, pero sí un subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    En el caso de ocurrir un error durante la decodificación, se puede usar
    <function>json_last_error</function> para determinar la naturaleza exacta del mismo.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
